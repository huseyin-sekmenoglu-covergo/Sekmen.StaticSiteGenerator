// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';
import type { ExportWebsiteData, ExportWebsiteResponses, ExportWebsiteErrors, GetDataData, GetDataResponses, GetDataErrors } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class UmbracoCommunityHtmlExporter {
    public static exportWebsite<ThrowOnError extends boolean = false>(options?: Options<ExportWebsiteData, ThrowOnError>) {
        return (options?.client ?? client).post<ExportWebsiteResponses, ExportWebsiteErrors, ThrowOnError>({
            ...formDataBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/export-website',
            ...options,
            headers: {
                'Content-Type': null,
                ...options?.headers
            }
        });
    }
    
    public static getData<ThrowOnError extends boolean = false>(options?: Options<GetDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDataResponses, GetDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/get-data',
            ...options
        });
    }
}
