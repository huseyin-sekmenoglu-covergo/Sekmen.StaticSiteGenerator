{"version":3,"file":"dashboard.element-DjxGafqx.js","sources":["../../../Client/src/api/sdk.gen.ts","../../../Client/src/dashboards/dashboard.element.ts"],"sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';\r\nimport type { PingData, PingResponse, WhatsMyNameData, WhatsMyNameResponse, WhatsTheTimeMrWolfData, WhatsTheTimeMrWolfResponse, WhoAmIData, WhoAmIResponse } from './types.gen';\r\nimport { client as _heyApiClient } from './client.gen';\r\n\r\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {\r\n    /**\r\n     * You can provide a client instance returned by `createClient()` instead of\r\n     * individual options. This might be also useful if you want to implement a\r\n     * custom client.\r\n     */\r\n    client?: Client;\r\n    /**\r\n     * You can pass arbitrary values through the `meta` object. This can be\r\n     * used to access values that aren't defined as part of the SDK function.\r\n     */\r\n    meta?: Record<string, unknown>;\r\n};\r\n\r\nexport class UmbracoCommunityHtmlExporterService {\r\n    public static ping<ThrowOnError extends boolean = false>(options?: Options<PingData, ThrowOnError>) {\r\n        return (options?.client ?? _heyApiClient).get<PingResponse, unknown, ThrowOnError>({\r\n            security: [\r\n                {\r\n                    scheme: 'bearer',\r\n                    type: 'http'\r\n                }\r\n            ],\r\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/ping',\r\n            ...options\r\n        });\r\n    }\r\n    public static whatsMyName<ThrowOnError extends boolean = false>(options?: Options<WhatsMyNameData, ThrowOnError>) {\r\n        return (options?.client ?? _heyApiClient).get<WhatsMyNameResponse, unknown, ThrowOnError>({\r\n            security: [\r\n                {\r\n                    scheme: 'bearer',\r\n                    type: 'http'\r\n                }\r\n            ],\r\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/whatsMyName',\r\n            ...options\r\n        });\r\n    }\r\n    \r\n    public static whatsTheTimeMrWolf<ThrowOnError extends boolean = false>(options?: Options<WhatsTheTimeMrWolfData, ThrowOnError>) {\r\n        return (options?.client ?? _heyApiClient).get<WhatsTheTimeMrWolfResponse, unknown, ThrowOnError>({\r\n            security: [\r\n                {\r\n                    scheme: 'bearer',\r\n                    type: 'http'\r\n                }\r\n            ],\r\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/whatsTheTimeMrWolf',\r\n            ...options\r\n        });\r\n    }\r\n    \r\n    public static whoAmI<ThrowOnError extends boolean = false>(options?: Options<WhoAmIData, ThrowOnError>) {\r\n        return (options?.client ?? _heyApiClient).get<WhoAmIResponse, unknown, ThrowOnError>({\r\n            security: [\r\n                {\r\n                    scheme: 'bearer',\r\n                    type: 'http'\r\n                }\r\n            ],\r\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/whoAmI',\r\n            ...options\r\n        });\r\n    }\r\n}","import {\r\n  LitElement,\r\n  css,\r\n  html,\r\n  customElement,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { UUIButtonElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UMB_NOTIFICATION_CONTEXT } from \"@umbraco-cms/backoffice/notification\";\r\nimport { UMB_CURRENT_USER_CONTEXT, UmbCurrentUserModel } from \"@umbraco-cms/backoffice/current-user\";\r\nimport { UmbracoCommunityHtmlExporterService, UserModel } from \"../api/index.js\";\r\n\r\n@customElement(\"example-dashboard\")\r\nexport class ExampleDashboardElement extends UmbElementMixin(LitElement) {\r\n  @state()\r\n  private _yourName?: string = \"Press the button!\";\r\n\r\n  @state()\r\n  private _timeFromMrWolf?: Date;\r\n\r\n  @state()\r\n  private _serverUserData?: UserModel;\r\n\r\n  @state()\r\n  private _contextCurrentUser?: UmbCurrentUserModel;\r\n\r\n  #notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n      this.#notificationContext = notificationContext;\r\n    });\r\n\r\n    this.consumeContext(UMB_CURRENT_USER_CONTEXT, (currentUserContext) => {\r\n      // When we have the current user context\r\n      // We can observe properties from it, such as the current user or perhaps just individual properties\r\n      // When the currentUser object changes we will get notified and can reset the @state properrty\r\n      this.observe(\r\n        currentUserContext?.currentUser,\r\n        (currentUser) => {\r\n          this._contextCurrentUser = currentUser;\r\n        },\r\n        \"_contextCurrentUser\"\r\n      );\r\n    });\r\n  }\r\n\r\n  #onClickWhoAmI = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await UmbracoCommunityHtmlExporterService.whoAmI();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this._serverUserData = data as UserModel;\r\n      buttonElement.state = \"success\";\r\n    }\r\n\r\n    if (this.#notificationContext) {\r\n      this.#notificationContext.peek(\"warning\", {\r\n        data: {\r\n          headline: `You are ${this._serverUserData?.name}`,\r\n          message: `Your email is ${this._serverUserData?.email}`,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  #onClickWhatsTheTimeMrWolf = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    // Getting a string - should I expect a datetime?!\r\n    const { data, error } = await UmbracoCommunityHtmlExporterService.whatsTheTimeMrWolf();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this._timeFromMrWolf = new Date(data);\r\n      buttonElement.state = \"success\";\r\n    }\r\n  };\r\n\r\n  #onClickWhatsMyName = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await UmbracoCommunityHtmlExporterService.whatsMyName();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    this._yourName = data;\r\n    buttonElement.state = \"success\";\r\n  };\r\n\r\n  render() {\r\n    return html`\r\n      <uui-box headline=\"Who am I?\">\r\n        <div slot=\"header\">[Server]</div>\r\n        <h2>\r\n          <uui-icon name=\"icon-user\"></uui-icon>${this._serverUserData?.email\r\n            ? this._serverUserData.email\r\n            : \"Press the button!\"}\r\n        </h2>\r\n        <ul>\r\n          ${this._serverUserData?.groups.map(\r\n            (group) => html`<li>${group.name}</li>`\r\n          )}\r\n        </ul>\r\n        <uui-button\r\n          color=\"default\"\r\n          look=\"primary\"\r\n          @click=\"${this.#onClickWhoAmI}\"\r\n        >\r\n          Who am I?\r\n        </uui-button>\r\n        <p>\r\n          This endpoint gets your current user from the server and displays your\r\n          email and list of user groups. It also displays a Notification with\r\n          your details.\r\n        </p>\r\n      </uui-box>\r\n\r\n      <uui-box headline=\"What's my Name?\">\r\n        <div slot=\"header\">[Server]</div>\r\n        <h2><uui-icon name=\"icon-user\"></uui-icon> ${this._yourName}</h2>\r\n        <uui-button\r\n          color=\"default\"\r\n          look=\"primary\"\r\n          @click=\"${this.#onClickWhatsMyName}\"\r\n        >\r\n          Whats my name?\r\n        </uui-button>\r\n        <p>\r\n          This endpoint has a forced delay to show the button 'waiting' state\r\n          for a few seconds before completing the request.\r\n        </p>\r\n      </uui-box>\r\n\r\n      <uui-box headline=\"What's the Time?\">\r\n        <div slot=\"header\">[Server]</div>\r\n        <h2>\r\n          <uui-icon name=\"icon-alarm-clock\"></uui-icon> ${this._timeFromMrWolf\r\n            ? this._timeFromMrWolf.toLocaleString()\r\n            : \"Press the button!\"}\r\n        </h2>\r\n        <uui-button\r\n          color=\"default\"\r\n          look=\"primary\"\r\n          @click=\"${this.#onClickWhatsTheTimeMrWolf}\"\r\n        >\r\n          Whats the time Mr Wolf?\r\n        </uui-button>\r\n        <p>This endpoint gets the current date and time from the server.</p>\r\n      </uui-box>\r\n\r\n      <uui-box headline=\"Who am I?\" class=\"wide\">\r\n        <div slot=\"header\">[Context]</div>\r\n        <p>Current user email: <b>${this._contextCurrentUser?.email}</b></p>\r\n        <p>\r\n          This is the JSON object available by consuming the\r\n          'UMB_CURRENT_USER_CONTEXT' context:\r\n        </p>\r\n        <umb-code-block language=\"json\" copy\r\n          >${JSON.stringify(this._contextCurrentUser, null, 2)}</umb-code-block\r\n        >\r\n      </uui-box>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: grid;\r\n        gap: var(--uui-size-layout-1);\r\n        padding: var(--uui-size-layout-1);\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n      }\r\n\r\n      uui-box {\r\n        margin-bottom: var(--uui-size-layout-1);\r\n      }\r\n\r\n      h2 {\r\n        margin-top: 0;\r\n      }\r\n\r\n      .wide {\r\n        grid-column: span 3;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport default ExampleDashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"example-dashboard\": ExampleDashboardElement;\r\n  }\r\n}\r\n"],"names":["UmbracoCommunityHtmlExporterService","options","_heyApiClient","_notificationContext","_onClickWhoAmI","_onClickWhatsTheTimeMrWolf","_onClickWhatsMyName","ExampleDashboardElement","UmbElementMixin","LitElement","__privateAdd","ev","buttonElement","data","error","__privateGet","UMB_NOTIFICATION_CONTEXT","notificationContext","__privateSet","UMB_CURRENT_USER_CONTEXT","currentUserContext","currentUser","html","group","css","__decorateClass","state","customElement","ExampleDashboardElement$1"],"mappings":"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"}