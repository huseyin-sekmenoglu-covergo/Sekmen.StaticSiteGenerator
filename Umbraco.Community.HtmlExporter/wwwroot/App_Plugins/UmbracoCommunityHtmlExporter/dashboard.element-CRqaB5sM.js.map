{"version":3,"file":"dashboard.element-CRqaB5sM.js","sources":["../../../Client/src/api/sdk.gen.ts","../../../Client/src/dashboards/dashboard.element.ts"],"sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\n\nimport { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';\nimport type { ExportWebsiteData, ExportWebsiteResponses, ExportWebsiteErrors, GetDataData, GetDataResponses, GetDataErrors } from './types.gen';\nimport { client } from './client.gen';\n\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {\n    /**\n     * You can provide a client instance returned by `createClient()` instead of\n     * individual options. This might be also useful if you want to implement a\n     * custom client.\n     */\n    client?: Client;\n    /**\n     * You can pass arbitrary values through the `meta` object. This can be\n     * used to access values that aren't defined as part of the SDK function.\n     */\n    meta?: Record<string, unknown>;\n};\n\nexport class UmbracoCommunityHtmlExporter {\n    public static exportWebsite<ThrowOnError extends boolean = false>(options?: Options<ExportWebsiteData, ThrowOnError>) {\n        return (options?.client ?? client).post<ExportWebsiteResponses, ExportWebsiteErrors, ThrowOnError>({\n            ...formDataBodySerializer,\n            security: [\n                {\n                    scheme: 'bearer',\n                    type: 'http'\n                }\n            ],\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/export-website',\n            ...options,\n            headers: {\n                'Content-Type': null,\n                ...options?.headers\n            }\n        });\n    }\n    \n    public static getData<ThrowOnError extends boolean = false>(options?: Options<GetDataData, ThrowOnError>) {\n        return (options?.client ?? client).get<GetDataResponses, GetDataErrors, ThrowOnError>({\n            security: [\n                {\n                    scheme: 'bearer',\n                    type: 'http'\n                }\n            ],\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/get-data',\n            ...options\n        });\n    }\n}\n","import { LitElement, css, html, customElement, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { UUIButtonElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UMB_NOTIFICATION_CONTEXT } from \"@umbraco-cms/backoffice/notification\";\r\nimport { DashboardViewModel, UmbracoCommunityHtmlExporter } from \"../api/index.js\";\r\n\r\n@customElement(\"html-exporter-dashboard\")\r\nexport class HtmlExporterDashboardElement extends UmbElementMixin(LitElement) {\r\n \r\n  @state()\r\n  private _serverDomainData?: DashboardViewModel;\r\n\r\n  #notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n      this.#notificationContext = notificationContext;\r\n    });\r\n\r\n    UmbracoCommunityHtmlExporter.getData()\r\n      .then((response) => {\r\n        this._serverDomainData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        if (this.#notificationContext)\r\n          this.#notificationContext.peek(\"danger\",  {\r\n            data: {\r\n              headline: `Error fetching data from server`,\r\n              message: `See console for details`,\r\n            },\r\n          });\r\n      });\r\n  }\r\n\r\n  #exportHtml = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    var siteUrl = (this.shadowRoot?.getElementById(\"sourceSite\") as HTMLInputElement)?.value;\r\n    var outputFolder = (this.shadowRoot?.getElementById(\"outputFolder\") as HTMLInputElement)?.value;\r\n    var additionalUrls = (this.shadowRoot?.getElementById(\"additionalUrls\") as HTMLTextAreaElement)?.value;\r\n    var targetUrl = (this.shadowRoot?.getElementById(\"targetUrl\") as HTMLInputElement)?.value;\r\n    if (!siteUrl) {\r\n      buttonElement.state = \"failed\";\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.peek(\"danger\", {\r\n          data: {\r\n            headline: `Error`,\r\n            message: `Please select a valid source site URL`,\r\n          },\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    if (!outputFolder) {\r\n      buttonElement.state = \"failed\";\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.peek(\"danger\", {\r\n          data: {\r\n            headline: `Error`,\r\n            message: `Please enter a valid output folder`,\r\n          },\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    if (!targetUrl) {\r\n      buttonElement.state = \"failed\";\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.peek(\"danger\", {\r\n          data: {\r\n            headline: `Error`,\r\n            message: `Please enter a valid target URL`,\r\n          },\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!targetUrl.endsWith(\"/\")) {\r\n      targetUrl += \"/\";\r\n    }\r\n    if (!targetUrl.startsWith(\"http://\") && !targetUrl.startsWith(\"https://\")) {\r\n      targetUrl = \"http://\" + targetUrl;\r\n    }\r\n\r\n    const { data, error } = await UmbracoCommunityHtmlExporter.exportWebsite({\r\n      body: {\r\n        SiteUrl: siteUrl,\r\n        OutputFolder: outputFolder,\r\n        AdditionalUrls: additionalUrls.split('\\n').map(url => url.trim()).filter(url => url.length > 0),\r\n        TargetUrl: targetUrl\r\n      }\r\n    });\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      buttonElement.state = \"success\";\r\n    }\r\n\r\n    if (this.#notificationContext) {\r\n      this.#notificationContext.peek(\"positive\", {\r\n        data: {\r\n          headline: `Export started`,\r\n          message: `The HTML export has been started successfully.`,\r\n        },\r\n      });\r\n    }\r\n\r\n    setTimeout(() => {\r\n      buttonElement.state = \"success\";\r\n    }, 2000);\r\n  };\r\n\r\n  render() {\r\n    return html`\r\n      <uui-box headline=\"Export Settings\" class=\"wide\">\r\n        <uui-form>\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"sourceSite\">Select source site</uui-label>\r\n            <uui-radio-group name=\"sourceSite\" id=\"sourceSite\" required>\r\n              ${this._serverDomainData?.domains?.map(\r\n                (site) => html`<uui-radio name=\"site\" value=\"${site.url}\">\r\n                    ${site.name} (${site.url})\r\n                  </uui-radio>`\r\n              )}\r\n            </uui-radio-group>\r\n          </uui-form-layout-item>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"outputFolder\">Output Folder</uui-label>\r\n            <uui-input type=\"text\" \r\n                  name=\"outputFolder\"\r\n                  id=\"outputFolder\"\r\n                  required\r\n                  placeholder=\"Enter output folder\"\r\n                  value=\"${this._serverDomainData?.settings?.outputFolder || ''}\"\r\n            ></uui-input>\r\n          </uui-form-layout-item>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"additionalUrls\">\r\n              Additional URLs (one per line)\r\n            </uui-label>\r\n            <uui-textarea\r\n              name=\"additionalUrls\"\r\n              id=\"additionalUrls\"\r\n              placeholder=\"Enter additional URLs (one per line)\"\r\n              rows=\"5\"\r\n              value=\"${this._serverDomainData?.settings?.additionalUrls.join(\"\\n\") || ''}\"\r\n            ></uui-textarea>\r\n          </uui-form-layout-item>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"targetUrl\">\r\n              Target URL\r\n            </uui-label>\r\n            <uui-input type=\"text\" \r\n                  name=\"targetUrl\" \r\n                  id=\"targetUrl\" \r\n                  required \r\n                  placeholder=\"Enter target URL\"\r\n                  value=\"${this._serverDomainData?.settings?.targetUrl || ''}\"\r\n            ></uui-input>\r\n          </uui-form-layout-item>\r\n          <uui-button\r\n            color=\"default\"\r\n            look=\"primary\"\r\n            @click=\"${this.#exportHtml}\"\r\n          >\r\n            Export HTML\r\n          </uui-button>\r\n        </uui-form>\r\n      </uui-box>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: grid;\r\n        gap: var(--uui-size-layout-1);\r\n        padding: var(--uui-size-layout-1);\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n      }\r\n\r\n      uui-box {\r\n        margin-bottom: var(--uui-size-layout-1);\r\n      }\r\n\r\n      h2 {\r\n        margin-top: 0;\r\n      }\r\n\r\n      .wide {\r\n        grid-column: span 3;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport default HtmlExporterDashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"html-exporter-dashboard\": HtmlExporterDashboardElement;\r\n  }\r\n}\r\n"],"names":["UmbracoCommunityHtmlExporter","options","client","formDataBodySerializer","_notificationContext","_exportHtml","HtmlExporterDashboardElement","UmbElementMixin","LitElement","__privateAdd","ev","buttonElement","siteUrl","outputFolder","additionalUrls","targetUrl","__privateGet","data","error","url","UMB_NOTIFICATION_CONTEXT","notificationContext","__privateSet","response","html","site","css","__decorateClass","state","customElement","HtmlExporterDashboardElement$1"],"mappings":"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"}