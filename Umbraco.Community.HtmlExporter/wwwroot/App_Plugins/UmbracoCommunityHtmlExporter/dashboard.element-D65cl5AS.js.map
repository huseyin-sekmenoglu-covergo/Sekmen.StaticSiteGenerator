{"version":3,"file":"dashboard.element-D65cl5AS.js","sources":["../../../Client/src/api/sdk.gen.ts","../../../Client/src/dashboards/dashboard.element.ts"],"sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';\r\nimport type { ExportWebsiteData, ExportWebsiteResponses, ExportWebsiteErrors, GetDomainsData, GetDomainsResponses, GetDomainsErrors } from './types.gen';\r\nimport { client } from './client.gen';\r\n\r\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {\r\n    /**\r\n     * You can provide a client instance returned by `createClient()` instead of\r\n     * individual options. This might be also useful if you want to implement a\r\n     * custom client.\r\n     */\r\n    client?: Client;\r\n    /**\r\n     * You can pass arbitrary values through the `meta` object. This can be\r\n     * used to access values that aren't defined as part of the SDK function.\r\n     */\r\n    meta?: Record<string, unknown>;\r\n};\r\n\r\nexport class UmbracoCommunityHtmlExporter {\r\n    public static exportWebsite<ThrowOnError extends boolean = false>(options?: Options<ExportWebsiteData, ThrowOnError>) {\r\n        return (options?.client ?? client).post<ExportWebsiteResponses, ExportWebsiteErrors, ThrowOnError>({\r\n            ...formDataBodySerializer,\r\n            security: [\r\n                {\r\n                    scheme: 'bearer',\r\n                    type: 'http'\r\n                }\r\n            ],\r\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/export-website',\r\n            ...options,\r\n            headers: {\r\n                'Content-Type': null,\r\n                ...options?.headers\r\n            }\r\n        });\r\n    }\r\n    \r\n    public static getDomains<ThrowOnError extends boolean = false>(options?: Options<GetDomainsData, ThrowOnError>) {\r\n        return (options?.client ?? client).get<GetDomainsResponses, GetDomainsErrors, ThrowOnError>({\r\n            security: [\r\n                {\r\n                    scheme: 'bearer',\r\n                    type: 'http'\r\n                }\r\n            ],\r\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/get-domains',\r\n            ...options\r\n        });\r\n    }\r\n}\r\n","import { LitElement, css, html, customElement, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { UUIButtonElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UMB_NOTIFICATION_CONTEXT } from \"@umbraco-cms/backoffice/notification\";\r\nimport { DashboardViewModel, UmbracoCommunityHtmlExporter } from \"../api/index.js\";\r\n\r\n@customElement(\"html-exporter-dashboard\")\r\nexport class HtmlExporterDashboardElement extends UmbElementMixin(LitElement) {\r\n \r\n  @state()\r\n  private _serverDomainData?: DashboardViewModel[];\r\n\r\n  #notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n      this.#notificationContext = notificationContext;\r\n    });\r\n\r\n    UmbracoCommunityHtmlExporter.getDomains()\r\n      .then((response) => {\r\n        this._serverDomainData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        if (this.#notificationContext)\r\n          this.#notificationContext.peek(\"danger\",  {\r\n            data: {\r\n              headline: `Error fetching data from server`,\r\n              message: `See console for details`,\r\n            },\r\n          });\r\n      });\r\n  }\r\n\r\n  #exportHtml = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await UmbracoCommunityHtmlExporter.exportWebsite({\r\n      body: {\r\n        SiteUrl: (this.shadowRoot?.getElementById(\"sourceSite\") as HTMLInputElement)?.value,\r\n        OutputFolder: (this.shadowRoot?.getElementById(\"outputFolder\") as HTMLInputElement)?.value,\r\n        AdditionalUrls: (this.shadowRoot?.getElementById(\"additionalUrls\") as HTMLTextAreaElement)?.value.split('\\n').map(url => url.trim()).filter(url => url.length > 0),\r\n        TargetUrl: (this.shadowRoot?.getElementById(\"targetUrl\") as HTMLInputElement)?.value\r\n      }\r\n    });\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      buttonElement.state = \"success\";\r\n    }\r\n\r\n    if (this.#notificationContext) {\r\n      this.#notificationContext.peek(\"warning\", {\r\n        data: {\r\n          headline: `You are`,\r\n          message: `Your email is`,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return html`\r\n      <uui-box headline=\"Export Settings\" class=\"wide\">\r\n        <uui-form>\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"sourceSite\">Select source site</uui-label>\r\n            <uui-radio-group name=\"sourceSite\" id=\"sourceSite\" required>\r\n              ${this._serverDomainData?.map(\r\n                (site) => html`<uui-radio id=\"${site.url}\" name=\"site\" value=\"${site.name}\">\r\n                    ${site.url}\r\n                  </uui-radio>`\r\n              )}\r\n            </uui-radio-group>\r\n          </uui-form-layout-item>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"outputFolder\">Output Folder</uui-label>\r\n            <uui-input type=\"text\" \r\n                  name=\"outputFolder\"\r\n                  id=\"outputFolder\"\r\n                  required\r\n                  placeholder=\"Enter output folder\"\r\n                  value=\"C:\\\\Temp\\\\HtmlExport\"\r\n            ></uui-input>\r\n          </uui-form-layout-item>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"additionalUrls\">\r\n              Additional URLs (one per line)\r\n            </uui-label>\r\n            <uui-textarea\r\n              name=\"additionalUrls\"\r\n              id=\"additionalUrls\"\r\n              placeholder=\"Enter additional URLs (one per line)\"\r\n            ></uui-textarea>\r\n          </uui-form-layout-item>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"targetUrl\">\r\n              Target URL\r\n            </uui-label>\r\n            <uui-input type=\"text\" \r\n                  name=\"targetUrl\" \r\n                  id=\"targetUrl\" \r\n                  required \r\n                  placeholder=\"Enter target URL\"\r\n                  value=\"https://huseyinsekmenoglu.net/\"\r\n            ></uui-input>\r\n          </uui-form-layout-item>\r\n          <uui-button\r\n            color=\"default\"\r\n            look=\"primary\"\r\n            @click=\"${this.#exportHtml}\"\r\n          >\r\n            Export HTML\r\n          </uui-button>\r\n        </uui-form>\r\n      </uui-box>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: grid;\r\n        gap: var(--uui-size-layout-1);\r\n        padding: var(--uui-size-layout-1);\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n      }\r\n\r\n      uui-box {\r\n        margin-bottom: var(--uui-size-layout-1);\r\n      }\r\n\r\n      h2 {\r\n        margin-top: 0;\r\n      }\r\n\r\n      .wide {\r\n        grid-column: span 3;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport default HtmlExporterDashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"html-exporter-dashboard\": HtmlExporterDashboardElement;\r\n  }\r\n}\r\n"],"names":["UmbracoCommunityHtmlExporter","options","client","formDataBodySerializer","_notificationContext","_exportHtml","HtmlExporterDashboardElement","UmbElementMixin","LitElement","__privateAdd","ev","buttonElement","data","error","url","__privateGet","UMB_NOTIFICATION_CONTEXT","notificationContext","__privateSet","response","html","site","css","__decorateClass","state","customElement","HtmlExporterDashboardElement$1"],"mappings":"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"}