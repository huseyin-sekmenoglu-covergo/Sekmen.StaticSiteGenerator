{"version":3,"file":"dashboard.element-BWqM50p4.js","sources":["../../../Client/src/api/sdk.gen.ts","../../../Client/src/dashboards/dashboard.element.ts"],"sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\n\nimport { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';\nimport type { ExportWebsiteData, ExportWebsiteResponses, ExportWebsiteErrors } from './types.gen';\nimport { client } from './client.gen';\n\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {\n    /**\n     * You can provide a client instance returned by `createClient()` instead of\n     * individual options. This might be also useful if you want to implement a\n     * custom client.\n     */\n    client?: Client;\n    /**\n     * You can pass arbitrary values through the `meta` object. This can be\n     * used to access values that aren't defined as part of the SDK function.\n     */\n    meta?: Record<string, unknown>;\n};\n\nexport class UmbracoCommunityHtmlExporter {\n    public static exportWebsite<ThrowOnError extends boolean = false>(options?: Options<ExportWebsiteData, ThrowOnError>) {\n        return (options?.client ?? client).post<ExportWebsiteResponses, ExportWebsiteErrors, ThrowOnError>({\n            ...formDataBodySerializer,\n            security: [\n                {\n                    scheme: 'bearer',\n                    type: 'http'\n                }\n            ],\n            url: '/umbraco/umbracocommunityhtmlexporter/api/v1/export-website',\n            ...options,\n            headers: {\n                'Content-Type': null,\n                ...options?.headers\n            }\n        });\n    }\n}\n","import { LitElement, css, html, customElement, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { UUIButtonElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UMB_NOTIFICATION_CONTEXT } from \"@umbraco-cms/backoffice/notification\";\r\nimport { UMB_CURRENT_USER_CONTEXT, UmbCurrentUserModel } from \"@umbraco-cms/backoffice/current-user\";\r\nimport { UmbracoCommunityHtmlExporter } from \"../api/index.js\";\r\n\r\n@customElement(\"html-exporter-dashboard\")\r\nexport class HtmlExporterDashboardElement extends UmbElementMixin(LitElement) {\r\n \r\n  @state()\r\n  private _serverUserData?: string;\r\n\r\n  @state()\r\n  private _contextCurrentUser?: UmbCurrentUserModel;\r\n\r\n  #notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n      this.#notificationContext = notificationContext;\r\n    });\r\n\r\n    this.consumeContext(UMB_CURRENT_USER_CONTEXT, (currentUserContext) => {\r\n      // When we have the current user context\r\n      // We can observe properties from it, such as the current user or perhaps just individual properties\r\n      // When the currentUser object changes we will get notified and can reset the @state properrty\r\n      this.observe(\r\n        currentUserContext?.currentUser,\r\n        (currentUser) => {\r\n          this._contextCurrentUser = currentUser;\r\n        },\r\n        \"_contextCurrentUser\"\r\n      );\r\n    });\r\n  }\r\n\r\n  #exportHtml = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await UmbracoCommunityHtmlExporter.exportWebsite({\r\n      body: {\r\n        SiteUrl: \"https://huseyinsekmenoglu.net/\",\r\n        TargetUrl: \"https://huseyinsekmenoglu.net/\",\r\n        OutputFolder: \"C:\\\\Temp\\\\HtmlExport\"\r\n      } \r\n    });\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      buttonElement.state = \"success\";\r\n    }\r\n\r\n    if (this.#notificationContext) {\r\n      this.#notificationContext.peek(\"warning\", {\r\n        data: {\r\n          headline: `You are ${this._serverUserData}`,\r\n          message: `Your email is ${this._serverUserData}`,\r\n        },\r\n      });\r\n    }\r\n  };\r\n  // ${this._serverUserData?.groups.map(\r\n  //   (group) => html`<li>${group.name}</li>`\r\n  // )}\r\n\r\n  render() {\r\n    return html`\r\n      <uui-box headline=\"Export HTML\" class=\"wide\">\r\n        <div slot=\"header\">[Server]</div>\r\n        <h2>\r\n          <uui-icon name=\"icon-user\"></uui-icon>${this._serverUserData\r\n            ? this._serverUserData\r\n            : \"Press the button!\"}\r\n        </h2>\r\n        <div class=\"form-group mb-3\">\r\n          <label for=\"siteUrl\" class=\"form-label\">Select source site</label> \r\n          <ul>\r\n            <li>\r\n            <input type=\"radio\" id=\"site1\" name=\"site\" value=\"site1\" checked>\r\n              <label for=\"site1\">https://huseyinsekmenoglu.net/</label>\r\n            </li>\r\n            <li>\r\n              <input type=\"radio\" id=\"site2\" name=\"site\" value=\"site2\">\r\n              <label for=\"site2\">https://example.com/</label>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"form-group mb-3\">\r\n          <label for=\"targetUrl\" class=\"form-label\">Target URL</label>\r\n            <input type=\"text\" \r\n                   name=\"targetUrl\" \r\n                   id=\"targetUrl\" \r\n                   class=\"form-control\" \r\n                   required \r\n                   placeholder=\"Enter target URL\"\r\n                   aria-label=\"Target URL\"\r\n                   value=\"https://huseyinsekmenoglu.net/\">\r\n        </div>\r\n        <uui-button\r\n          color=\"default\"\r\n          look=\"primary\"\r\n          @click=\"${this.#exportHtml}\"\r\n        >\r\n          Export HTML\r\n        </uui-button>\r\n        <p>\r\n          This endpoint gets your current user from the server and displays your\r\n          email and list of user groups. It also displays a Notification with\r\n          your details.\r\n        </p>\r\n      </uui-box>\r\n\r\n\r\n      <uui-box headline=\"Who am I?\" class=\"wide\">\r\n        <div slot=\"header\">[Context]</div>\r\n        <p>Current user email: <b>${this._contextCurrentUser?.email}</b></p>\r\n        <p>\r\n          This is the JSON object available by consuming the\r\n          'UMB_CURRENT_USER_CONTEXT' context:\r\n        </p>\r\n        <umb-code-block language=\"json\" copy\r\n          >${JSON.stringify(this._contextCurrentUser, null, 2)}</umb-code-block\r\n        >\r\n      </uui-box>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: grid;\r\n        gap: var(--uui-size-layout-1);\r\n        padding: var(--uui-size-layout-1);\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n      }\r\n\r\n      uui-box {\r\n        margin-bottom: var(--uui-size-layout-1);\r\n      }\r\n\r\n      h2 {\r\n        margin-top: 0;\r\n      }\r\n\r\n      .wide {\r\n        grid-column: span 3;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport default HtmlExporterDashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"html-exporter-dashboard\": HtmlExporterDashboardElement;\r\n  }\r\n}\r\n"],"names":["UmbracoCommunityHtmlExporter","options","client","formDataBodySerializer","_notificationContext","_exportHtml","HtmlExporterDashboardElement","UmbElementMixin","LitElement","__privateAdd","ev","buttonElement","data","error","__privateGet","UMB_NOTIFICATION_CONTEXT","notificationContext","__privateSet","UMB_CURRENT_USER_CONTEXT","currentUserContext","currentUser","html","css","__decorateClass","state","customElement","HtmlExporterDashboardElement$1"],"mappings":";;;;;AAoBO,MAAMA,EAA6B;AAAA,EACtC,OAAc,cAAoDC,GAAoD;AAClH,YAAQA,GAAS,UAAUC,GAAQ,KAAgE;AAAA,MAC/F,GAAGC;AAAA,MACH,UAAU;AAAA,QACN;AAAA,UACI,QAAQ;AAAA,UACR,MAAM;AAAA,QAAA;AAAA,MACV;AAAA,MAEJ,KAAK;AAAA,MACL,GAAGF;AAAA,MACH,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,GAAGA,GAAS;AAAA,MAAA;AAAA,IAChB,CACH;AAAA,EACL;AACJ;;;;;;;gVCtCAG,GAAAC;AAQO,IAAMC,IAAN,cAA2CC,EAAgBC,CAAU,EAAE;AAAA,EAU5E,cAAc;AACZ,UAAA,GAHFC,EAAA,MAAAL,CAAA,GAuBAK,EAAA,MAAAJ,GAAc,OAAOK,MAAc;AACjC,YAAMC,IAAgBD,EAAG;AACzB,MAAAC,EAAc,QAAQ;AAEtB,YAAM,EAAE,MAAAC,GAAM,OAAAC,EAAA,IAAU,MAAMb,EAA6B,cAAc;AAAA,QACvE,MAAM;AAAA,UACJ,SAAS;AAAA,UACT,WAAW;AAAA,UACX,cAAc;AAAA,QAAA;AAAA,MAChB,CACD;AAED,UAAIa,GAAO;AACT,QAAAF,EAAc,QAAQ,UACtB,QAAQ,MAAME,CAAK;AACnB;AAAA,MACF;AAEA,MAAID,MAAS,WACXD,EAAc,QAAQ,YAGpBG,QAAKV,CAAA,KACPU,EAAA,MAAKV,CAAA,EAAqB,KAAK,WAAW;AAAA,QACxC,MAAM;AAAA,UACJ,UAAU,WAAW,KAAK,eAAe;AAAA,UACzC,SAAS,iBAAiB,KAAK,eAAe;AAAA,QAAA;AAAA,MAChD,CACD;AAAA,IAEL,CAAA,GAhDE,KAAK,eAAeW,GAA0B,CAACC,MAAwB;AACrE,MAAAC,EAAA,MAAKb,GAAuBY,CAAA;AAAA,IAC9B,CAAC,GAED,KAAK,eAAeE,GAA0B,CAACC,MAAuB;AAIpE,WAAK;AAAA,QACHA,GAAoB;AAAA,QACpB,CAACC,MAAgB;AACf,eAAK,sBAAsBA;AAAA,QAC7B;AAAA,QACA;AAAA,MAAA;AAAA,IAEJ,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAqCA,SAAS;AACP,WAAOC;AAAA;AAAA;AAAA;AAAA,kDAIuC,KAAK,kBACzC,KAAK,kBACL,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA8BbP,QAAKT,CAAA,CAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAcA,KAAK,qBAAqB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAMtD,KAAK,UAAU,KAAK,qBAAqB,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,EAI5D;AAwBF;AA/IED,IAAA,oBAAA,QAAA;AAuBAC,IAAA,oBAAA,QAAA;AA/BWC,EAiIJ,SAAS;AAAA,EACdgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBF;AAnJQC,EAAA;AAAA,EADPC,EAAA;AAAM,GAFIlB,EAGH,WAAA,mBAAA,CAAA;AAGAiB,EAAA;AAAA,EADPC,EAAA;AAAM,GALIlB,EAMH,WAAA,uBAAA,CAAA;AANGA,IAANiB,EAAA;AAAA,EADNE,EAAc,yBAAyB;AAAA,GAC3BnB,CAAA;AAyJb,MAAAoB,IAAepB;"}